{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","entries","start","finish","total","displayTotal","submitTime","bind","deleteTime","e","preventDefault","target","value","timeStart","Date","diff","console","log","newTotal","this","minutes","newDisplay","prevEntries","newEntry","id","push","setState","i","length","splice","newEntries","className","href","class","map","entry","key","onClick","onSubmit","type","name","for","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9445c34.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      entries: [],\n      start: \"\",\n      finish: \"\",\n      total: 0,\n      displayTotal: \"0:0\"\n    };\n\n    this.submitTime = this.submitTime.bind(this);\n    this.deleteTime = this.deleteTime.bind(this);\n  }\n\n  submitTime(e) {\n    e.preventDefault();\n    if (e.target.start.value === \"\" || e.target.finish.value === \"\") {\n      return;\n    }\n    var timeStart = new Date(\"01/01/2019 \" + e.target.start.value);\n    var timeEnd = new Date(\"01/01/2019 \" + e.target.finish.value);\n\n    var diff = (timeEnd - timeStart) / 60000; //dividing by seconds and milliseconds\n\n    console.log(diff);\n\n    var newTotal = this.state.total + diff;\n\n    var minutes = newTotal % 60;\n    var hours = (newTotal - minutes) / 60;\n\n    var newDisplay = hours + \":\" + minutes;\n\n    var prevEntries = this.state.entries;\n    var newEntry = {\n      start: e.target.start.value,\n      finish: e.target.finish.value,\n      id: newTotal\n    };\n    prevEntries.push(newEntry);\n\n    this.setState({\n      total: newTotal,\n      displayTotal: newDisplay,\n      entries: prevEntries,\n      start: \"\",\n      finish: \"\"\n    });\n  }\n\n  deleteTime(id) {\n    var entries = this.state.entries;\n    var newTotal = this.state.total;\n    var newDisplay = this.state.displayTotal;\n\n    for (var i = 0; i < entries.length; i++) {\n      if (entries[i].id === id) {\n        var timeStart = new Date(\"01/01/2019 \" + entries[i].start);\n        var timeEnd = new Date(\"01/01/2019 \" + entries[i].finish);\n\n        var diff = (timeEnd - timeStart) / 60000;\n\n        newTotal -= diff;\n\n        var minutes = newTotal % 60;\n        var hours = (newTotal - minutes) / 60;\n\n        newDisplay = hours + \":\" + minutes;\n\n        entries.splice(i, 1);\n      }\n    }\n\n    var newEntries = entries;\n    console.log(newEntries);\n\n    this.setState({\n      entries: newEntries,\n      total: newTotal,\n      displayTotal: newDisplay\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navbar-fixed\">\n          <nav className=\"teal accent-4\">\n            <div className=\"container\">\n              <div className=\"nav-wrapper\">\n                <a href=\"#!\" className=\"brand-logo center\">\n                  <i className=\"icon ion-ios-timer icon-lg\"></i>WORKING{\" \"}\n                  <b>HOURS</b>\n                </a>\n              </div>\n            </div>\n          </nav>\n        </div>\n\n        <div className=\"container\">\n          <br />\n\n          <br />\n          <div class=\"row\">\n            <div class=\"col m9\">\n              <div class=\"card text-left\">\n                <div class=\"card-content \">\n                  <span class=\"card-title\">\n                    Insert the starting time & finishing time\n                  </span>\n\n                  {this.state.entries ? (\n                    this.state.entries.map(entry => (\n                      <div className=\"row\" key={entry.id}>\n                        <div class=\"input-field col m5\">\n                          <h6>{entry.start}</h6>\n                        </div>\n                        <div class=\"input-field col m5\">\n                          <h6>{entry.finish}</h6>\n                        </div>\n                        <div class=\"input-field col m2\">\n                          <button\n                            class=\"btn-flat\"\n                            onClick={() => {\n                              this.deleteTime(entry.id);\n                            }}\n                          >\n                            <i className=\"icon ion-ios-close-circle-outline icon-lg red-text\"></i>\n                          </button>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div />\n                  )}\n\n                  <div className=\"row\">\n                    <form onSubmit={this.submitTime}>\n                      <div class=\"input-field col m5\">\n                        <input\n                          type=\"text\"\n                          name=\"start\"\n                          class=\"col s7 timepicker\"\n                          value={this.state.start}\n                        />\n                        <label for=\"first_name\">Start</label>\n                      </div>\n                      <div class=\"input-field col m5\">\n                        <input\n                          type=\"text\"\n                          name=\"finish\"\n                          class=\"col s7 timepicker\"\n                          value={this.state.finish}\n                        />\n                        <label for=\"last_name\">Finish</label>\n                      </div>\n                      <div class=\"input-field col m2\">\n                        <button type=\"submit\" class=\"btn\">\n                          Add\n                        </button>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col m3\">\n              <div class=\"card fixed\">\n                <div class=\"card-content padded\">\n                  <span class=\"card-title\">Total Hours</span>\n                  <h1>{this.state.displayTotal}</h1>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}